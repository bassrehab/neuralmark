import matplotlib.pyplot as plt
import numpy as np
import cv2
from typing import List, Optional, Tuple, Dict
import logging
from pathlib import Path


def setup_plot_style():
    """Setup consistent plot style."""
    # Use a default matplotlib style instead of seaborn
    plt.style.use('default')

    # Set custom style parameters
    plt.rcParams['figure.figsize'] = (12, 8)
    plt.rcParams['axes.grid'] = True
    plt.rcParams['grid.alpha'] = 0.3
    plt.rcParams['axes.spines.top'] = False
    plt.rcParams['axes.spines.right'] = False
    plt.rcParams['figure.facecolor'] = 'white'
    plt.rcParams['axes.facecolor'] = 'white'
    plt.rcParams['axes.labelsize'] = 12
    plt.rcParams['xtick.labelsize'] = 10
    plt.rcParams['ytick.labelsize'] = 10
    plt.rcParams['legend.fontsize'] = 10
    plt.rcParams['figure.titlesize'] = 14

def visualize_attention_maps(image: np.ndarray,
                             attention_maps: List[np.ndarray],
                             save_path: Optional[str] = None,
                             config: Optional[dict] = None) -> None:
    """Visualize attention maps generated by neural attention module."""
    if config is None:
        config = {
            'visualization': {
                'attention_maps': {
                    'colormap': 'viridis',
                    'alpha': 0.7
                },
                'dpi': 300
            }
        }

    setup_plot_style()
    num_maps = len(attention_maps)
    fig, axes = plt.subplots(1, num_maps + 1, figsize=(5 * (num_maps + 1), 5))

    # Ensure axes is always a list
    if num_maps == 0:
        axes = [axes]

    # Plot original image
    axes[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    axes[0].set_title('Original Image')
    axes[0].axis('off')

    # Plot attention maps
    for i, attention_map in enumerate(attention_maps):
        # Normalize attention map
        attention_map = cv2.resize(attention_map, (image.shape[1], image.shape[0]))
        norm_map = cv2.normalize(attention_map, None, 0, 1, cv2.NORM_MINMAX)

        # Apply colormap
        colormap = config['visualization']['attention_maps'].get('colormap', 'viridis')
        alpha = config['visualization']['attention_maps'].get('alpha', 0.7)

        axes[i + 1].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        im = axes[i + 1].imshow(norm_map, cmap=colormap, alpha=alpha)
        axes[i + 1].set_title(f'Attention Layer {i + 1}')
        axes[i + 1].axis('off')
        plt.colorbar(im, ax=axes[i + 1])

    plt.tight_layout()
    if save_path:
        plt.savefig(save_path, dpi=config['visualization'].get('dpi', 300))
        plt.close()
    else:
        plt.show()


def plot_test_results(results: Dict, save_dir: Path, logger: logging.Logger) -> None:
    """Generate comprehensive visualization of test results."""
    setup_plot_style()

    try:
        # 1. Success rates by scenario
        plt.figure(figsize=(12, 6))
        scenarios = list(results['by_scenario'].keys())
        success_rates = [data['success_rate'] for data in results['by_scenario'].values()]

        plt.bar(scenarios, success_rates)
        plt.title('Success Rates by Scenario')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Success Rate (%)')
        plt.tight_layout()
        plt.savefig(save_dir / 'success_rates.png')
        plt.close()

        # 2. Similarity distributions
        plt.figure(figsize=(12, 6))
        similarities = [case['similarity'] for case in results['test_cases']]
        plt.hist(similarities, bins=30)
        plt.title('Distribution of Similarity Scores')
        plt.xlabel('Similarity Score')
        plt.ylabel('Frequency')
        plt.tight_layout()
        plt.savefig(save_dir / 'similarity_distribution.png')
        plt.close()

        # 3. Modification detection accuracy
        mods_detected = {}
        for case in results['test_cases']:
            for mod in case.get('modifications', []):
                mods_detected[mod] = mods_detected.get(mod, 0) + 1

        if mods_detected:
            plt.figure(figsize=(12, 6))
            plt.bar(list(mods_detected.keys()), list(mods_detected.values()))
            plt.title('Detected Modifications')
            plt.xticks(rotation=45, ha='right')
            plt.ylabel('Count')
            plt.tight_layout()
            plt.savefig(save_dir / 'modifications.png')
            plt.close()

        # 4. Error rates over time
        plt.figure(figsize=(12, 6))
        test_indices = range(len(results['test_cases']))
        errors = [1 if case['verified'] != case['expected'] else 0
                  for case in results['test_cases']]
        plt.plot(test_indices, errors, 'r.')
        plt.title('Errors Over Time')
        plt.xlabel('Test Case Index')
        plt.ylabel('Error (0=correct, 1=error)')
        plt.tight_layout()
        plt.savefig(save_dir / 'error_timeline.png')
        plt.close()

        # 5. Similarity matrix
        if len(results['test_cases']) > 0:
            similarities = np.array([[0.0 if i == j else
                                      results['test_cases'][i].get('similarity', 0)
                                      for j in range(len(results['test_cases']))]
                                     for i in range(len(results['test_cases']))])

            plt.figure(figsize=(12, 10))
            plt.imshow(similarities, cmap='viridis')
            plt.colorbar(label='Similarity Score')
            plt.title('Similarity Matrix')
            plt.xlabel('Test Case Index')
            plt.ylabel('Test Case Index')
            plt.tight_layout()
            plt.savefig(save_dir / 'similarity_matrix.png')
            plt.close()

        logger.info(f"Generated result visualizations in {save_dir}")

    except Exception as e:
        logger.error(f"Error generating visualizations: {str(e)}")


def create_comparison_grid(images: List[Tuple[str, np.ndarray]],
                           save_path: Optional[str] = None,
                           title: str = "Image Comparison") -> None:
    """Create a grid of images for comparison."""
    setup_plot_style()  # Ensure style is set

    n_images = len(images)
    if n_images == 0:
        return

    # Calculate grid dimensions
    n_cols = min(4, n_images)
    n_rows = (n_images + n_cols - 1) // n_cols

    # Create subplot grid
    fig = plt.figure(figsize=(4 * n_cols, 4 * n_rows))

    # Plot each image
    for idx, (label, img) in enumerate(images):
        ax = fig.add_subplot(n_rows, n_cols, idx + 1)

        if img.ndim == 2:
            ax.imshow(img, cmap='gray')
        else:
            ax.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

        ax.set_title(label, pad=10)
        ax.axis('off')

    plt.suptitle(title, fontsize=16, y=1.02)
    plt.tight_layout()

    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.close()
    else:
        plt.show()


def visualize_fingerprint(image: np.ndarray,
                          fingerprint: np.ndarray,
                          save_path: Optional[str] = None) -> None:
    """
    Visualize the original image and its fingerprint.

    Args:
        image: Original image
        fingerprint: Generated fingerprint
        save_path: Optional path to save the visualization
    """
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

    # Plot original image
    ax1.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    ax1.set_title('Original Image')
    ax1.axis('off')

    # Plot fingerprint
    normalized_fp = cv2.normalize(fingerprint, None, 0, 1, cv2.NORM_MINMAX)
    im = ax2.imshow(normalized_fp, cmap='viridis')
    ax2.set_title('Fingerprint')
    ax2.axis('off')
    plt.colorbar(im, ax=ax2)

    plt.tight_layout()
    if save_path:
        plt.savefig(save_path, dpi=300)
        plt.close()
    else:
        plt.show()


def plot_modification_analysis(original: np.ndarray,
                               modified: np.ndarray,
                               differences: np.ndarray,
                               save_path: Optional[str] = None) -> None:
    """
    Visualize original, modified, and difference images.

    Args:
        original: Original image
        modified: Modified image
        differences: Difference map
        save_path: Optional path to save the visualization
    """
    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))

    # Plot original
    ax1.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
    ax1.set_title('Original')
    ax1.axis('off')

    # Plot modified
    ax2.imshow(cv2.cvtColor(modified, cv2.COLOR_BGR2RGB))
    ax2.set_title('Modified')
    ax2.axis('off')

    # Plot differences
    norm_diff = cv2.normalize(differences, None, 0, 1, cv2.NORM_MINMAX)
    im = ax3.imshow(norm_diff, cmap='hot')
    ax3.set_title('Differences')
    ax3.axis('off')
    plt.colorbar(im, ax=ax3)

    plt.tight_layout()
    if save_path:
        plt.savefig(save_path, dpi=300)
        plt.close()
    else:
        plt.show()


